//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g 2014-03-10 16:22:34

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System;
using TigerCompiler.ErrorHandling;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class TigerLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ALIAS_TYPE_DECLARATION=4;
	public const int AND=5;
	public const int ARRAY=6;
	public const int ARRAY_INDEX=7;
	public const int ARRAY_TYPE_DECLARATION=8;
	public const int ASSIGN=9;
	public const int BREAK=10;
	public const int COLON=11;
	public const int COMMA=12;
	public const int COMMENT=13;
	public const int DIGIT=14;
	public const int DIV=15;
	public const int DO=16;
	public const int DOT=17;
	public const int ELSE=18;
	public const int END=19;
	public const int EQUAL=20;
	public const int ESC_SEQ=21;
	public const int EXPRESSION=22;
	public const int EXPRESSION_SEQ=23;
	public const int FOR=24;
	public const int FUNCTION=25;
	public const int FUNCTION_DECLARATION=26;
	public const int GREATER_EQUAL_THAN=27;
	public const int GREATER_THAN=28;
	public const int IDENTIFIER=29;
	public const int IF=30;
	public const int IF_THEN=31;
	public const int IF_THEN_ELSE=32;
	public const int IN=33;
	public const int INT=34;
	public const int LBRACE=35;
	public const int LBRACKET=36;
	public const int LESS_EQUAL_THAN=37;
	public const int LESS_THAN=38;
	public const int LET=39;
	public const int LETTER=40;
	public const int LPARENTHESIS=41;
	public const int LVALUE=42;
	public const int MINUS=43;
	public const int MULT=44;
	public const int NEGATE=45;
	public const int NIL=46;
	public const int NOT_EQUAL=47;
	public const int OF=48;
	public const int OR=49;
	public const int PLUS=50;
	public const int RBRACE=51;
	public const int RBRACKET=52;
	public const int RECORD=53;
	public const int RECORD_TYPE_DECLARATION=54;
	public const int RETURN_TYPE=55;
	public const int RPARENTHESIS=56;
	public const int SEMICOLON=57;
	public const int STRING=58;
	public const int THEN=59;
	public const int TO=60;
	public const int TYPE=61;
	public const int TYPE_DECLARATION=62;
	public const int TYPE_DECLARATION_FIELD=63;
	public const int VAR=64;
	public const int VAR_DECLARATION=65;
	public const int WHILE=66;
	public const int WS=67;

	public override void ReportError(RecognitionException exc) {
		Errors.AddSintacticError(exc, TokenNames);
	}


    // delegates
    // delegators

	public TigerLexer()
	{
		OnCreated();
	}

	public TigerLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public TigerLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 1);
		TraceIn("AND", 1);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:17:5: ( '&' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:17:7: '&'
			{
			DebugLocation(17, 7);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 1);
			LeaveRule("AND", 1);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_ARRAY();
	partial void LeaveRule_ARRAY();

	// $ANTLR start "ARRAY"
	[GrammarRule("ARRAY")]
	private void mARRAY()
	{
		EnterRule_ARRAY();
		EnterRule("ARRAY", 2);
		TraceIn("ARRAY", 2);
		try
		{
			int _type = ARRAY;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:18:7: ( 'array' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:18:9: 'array'
			{
			DebugLocation(18, 9);
			Match("array"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ARRAY", 2);
			LeaveRule("ARRAY", 2);
			LeaveRule_ARRAY();
		}
	}
	// $ANTLR end "ARRAY"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 3);
		TraceIn("ASSIGN", 3);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:19:8: ( ':=' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:19:10: ':='
			{
			DebugLocation(19, 10);
			Match(":="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 3);
			LeaveRule("ASSIGN", 3);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_BREAK();
	partial void LeaveRule_BREAK();

	// $ANTLR start "BREAK"
	[GrammarRule("BREAK")]
	private void mBREAK()
	{
		EnterRule_BREAK();
		EnterRule("BREAK", 4);
		TraceIn("BREAK", 4);
		try
		{
			int _type = BREAK;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:20:7: ( 'break' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:20:9: 'break'
			{
			DebugLocation(20, 9);
			Match("break"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BREAK", 4);
			LeaveRule("BREAK", 4);
			LeaveRule_BREAK();
		}
	}
	// $ANTLR end "BREAK"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 5);
		TraceIn("COLON", 5);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:21:7: ( ':' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:21:9: ':'
			{
			DebugLocation(21, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 5);
			LeaveRule("COLON", 5);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 6);
		TraceIn("COMMA", 6);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:22:7: ( ',' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:22:9: ','
			{
			DebugLocation(22, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 6);
			LeaveRule("COMMA", 6);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 7);
		TraceIn("DIV", 7);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:23:5: ( '/' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:23:7: '/'
			{
			DebugLocation(23, 7);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 7);
			LeaveRule("DIV", 7);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_DO();
	partial void LeaveRule_DO();

	// $ANTLR start "DO"
	[GrammarRule("DO")]
	private void mDO()
	{
		EnterRule_DO();
		EnterRule("DO", 8);
		TraceIn("DO", 8);
		try
		{
			int _type = DO;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:24:4: ( 'do' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:24:6: 'do'
			{
			DebugLocation(24, 6);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DO", 8);
			LeaveRule("DO", 8);
			LeaveRule_DO();
		}
	}
	// $ANTLR end "DO"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 9);
		TraceIn("DOT", 9);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:25:5: ( '.' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:25:7: '.'
			{
			DebugLocation(25, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 9);
			LeaveRule("DOT", 9);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 10);
		TraceIn("ELSE", 10);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:26:6: ( 'else' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:26:8: 'else'
			{
			DebugLocation(26, 8);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 10);
			LeaveRule("ELSE", 10);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 11);
		TraceIn("END", 11);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:27:5: ( 'end' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:27:7: 'end'
			{
			DebugLocation(27, 7);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 11);
			LeaveRule("END", 11);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 12);
		TraceIn("EQUAL", 12);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:28:7: ( '=' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:28:9: '='
			{
			DebugLocation(28, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 12);
			LeaveRule("EQUAL", 12);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_FOR();
	partial void LeaveRule_FOR();

	// $ANTLR start "FOR"
	[GrammarRule("FOR")]
	private void mFOR()
	{
		EnterRule_FOR();
		EnterRule("FOR", 13);
		TraceIn("FOR", 13);
		try
		{
			int _type = FOR;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:29:5: ( 'for' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:29:7: 'for'
			{
			DebugLocation(29, 7);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FOR", 13);
			LeaveRule("FOR", 13);
			LeaveRule_FOR();
		}
	}
	// $ANTLR end "FOR"

	partial void EnterRule_FUNCTION();
	partial void LeaveRule_FUNCTION();

	// $ANTLR start "FUNCTION"
	[GrammarRule("FUNCTION")]
	private void mFUNCTION()
	{
		EnterRule_FUNCTION();
		EnterRule("FUNCTION", 14);
		TraceIn("FUNCTION", 14);
		try
		{
			int _type = FUNCTION;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:30:10: ( 'function' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:30:12: 'function'
			{
			DebugLocation(30, 12);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNCTION", 14);
			LeaveRule("FUNCTION", 14);
			LeaveRule_FUNCTION();
		}
	}
	// $ANTLR end "FUNCTION"

	partial void EnterRule_GREATER_EQUAL_THAN();
	partial void LeaveRule_GREATER_EQUAL_THAN();

	// $ANTLR start "GREATER_EQUAL_THAN"
	[GrammarRule("GREATER_EQUAL_THAN")]
	private void mGREATER_EQUAL_THAN()
	{
		EnterRule_GREATER_EQUAL_THAN();
		EnterRule("GREATER_EQUAL_THAN", 15);
		TraceIn("GREATER_EQUAL_THAN", 15);
		try
		{
			int _type = GREATER_EQUAL_THAN;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:31:20: ( '>=' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:31:22: '>='
			{
			DebugLocation(31, 22);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER_EQUAL_THAN", 15);
			LeaveRule("GREATER_EQUAL_THAN", 15);
			LeaveRule_GREATER_EQUAL_THAN();
		}
	}
	// $ANTLR end "GREATER_EQUAL_THAN"

	partial void EnterRule_GREATER_THAN();
	partial void LeaveRule_GREATER_THAN();

	// $ANTLR start "GREATER_THAN"
	[GrammarRule("GREATER_THAN")]
	private void mGREATER_THAN()
	{
		EnterRule_GREATER_THAN();
		EnterRule("GREATER_THAN", 16);
		TraceIn("GREATER_THAN", 16);
		try
		{
			int _type = GREATER_THAN;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:32:14: ( '>' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:32:16: '>'
			{
			DebugLocation(32, 16);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER_THAN", 16);
			LeaveRule("GREATER_THAN", 16);
			LeaveRule_GREATER_THAN();
		}
	}
	// $ANTLR end "GREATER_THAN"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 17);
		TraceIn("IF", 17);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:33:4: ( 'if' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:33:6: 'if'
			{
			DebugLocation(33, 6);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 17);
			LeaveRule("IF", 17);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_IN();
	partial void LeaveRule_IN();

	// $ANTLR start "IN"
	[GrammarRule("IN")]
	private void mIN()
	{
		EnterRule_IN();
		EnterRule("IN", 18);
		TraceIn("IN", 18);
		try
		{
			int _type = IN;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:34:4: ( 'in' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:34:6: 'in'
			{
			DebugLocation(34, 6);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN", 18);
			LeaveRule("IN", 18);
			LeaveRule_IN();
		}
	}
	// $ANTLR end "IN"

	partial void EnterRule_LBRACE();
	partial void LeaveRule_LBRACE();

	// $ANTLR start "LBRACE"
	[GrammarRule("LBRACE")]
	private void mLBRACE()
	{
		EnterRule_LBRACE();
		EnterRule("LBRACE", 19);
		TraceIn("LBRACE", 19);
		try
		{
			int _type = LBRACE;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:35:8: ( '{' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:35:10: '{'
			{
			DebugLocation(35, 10);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LBRACE", 19);
			LeaveRule("LBRACE", 19);
			LeaveRule_LBRACE();
		}
	}
	// $ANTLR end "LBRACE"

	partial void EnterRule_LBRACKET();
	partial void LeaveRule_LBRACKET();

	// $ANTLR start "LBRACKET"
	[GrammarRule("LBRACKET")]
	private void mLBRACKET()
	{
		EnterRule_LBRACKET();
		EnterRule("LBRACKET", 20);
		TraceIn("LBRACKET", 20);
		try
		{
			int _type = LBRACKET;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:36:10: ( '[' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:36:12: '['
			{
			DebugLocation(36, 12);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LBRACKET", 20);
			LeaveRule("LBRACKET", 20);
			LeaveRule_LBRACKET();
		}
	}
	// $ANTLR end "LBRACKET"

	partial void EnterRule_LESS_EQUAL_THAN();
	partial void LeaveRule_LESS_EQUAL_THAN();

	// $ANTLR start "LESS_EQUAL_THAN"
	[GrammarRule("LESS_EQUAL_THAN")]
	private void mLESS_EQUAL_THAN()
	{
		EnterRule_LESS_EQUAL_THAN();
		EnterRule("LESS_EQUAL_THAN", 21);
		TraceIn("LESS_EQUAL_THAN", 21);
		try
		{
			int _type = LESS_EQUAL_THAN;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:37:17: ( '<=' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:37:19: '<='
			{
			DebugLocation(37, 19);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_EQUAL_THAN", 21);
			LeaveRule("LESS_EQUAL_THAN", 21);
			LeaveRule_LESS_EQUAL_THAN();
		}
	}
	// $ANTLR end "LESS_EQUAL_THAN"

	partial void EnterRule_LESS_THAN();
	partial void LeaveRule_LESS_THAN();

	// $ANTLR start "LESS_THAN"
	[GrammarRule("LESS_THAN")]
	private void mLESS_THAN()
	{
		EnterRule_LESS_THAN();
		EnterRule("LESS_THAN", 22);
		TraceIn("LESS_THAN", 22);
		try
		{
			int _type = LESS_THAN;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:38:11: ( '<' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:38:13: '<'
			{
			DebugLocation(38, 13);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_THAN", 22);
			LeaveRule("LESS_THAN", 22);
			LeaveRule_LESS_THAN();
		}
	}
	// $ANTLR end "LESS_THAN"

	partial void EnterRule_LET();
	partial void LeaveRule_LET();

	// $ANTLR start "LET"
	[GrammarRule("LET")]
	private void mLET()
	{
		EnterRule_LET();
		EnterRule("LET", 23);
		TraceIn("LET", 23);
		try
		{
			int _type = LET;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:39:5: ( 'let' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:39:7: 'let'
			{
			DebugLocation(39, 7);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LET", 23);
			LeaveRule("LET", 23);
			LeaveRule_LET();
		}
	}
	// $ANTLR end "LET"

	partial void EnterRule_LPARENTHESIS();
	partial void LeaveRule_LPARENTHESIS();

	// $ANTLR start "LPARENTHESIS"
	[GrammarRule("LPARENTHESIS")]
	private void mLPARENTHESIS()
	{
		EnterRule_LPARENTHESIS();
		EnterRule("LPARENTHESIS", 24);
		TraceIn("LPARENTHESIS", 24);
		try
		{
			int _type = LPARENTHESIS;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:40:14: ( '(' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:40:16: '('
			{
			DebugLocation(40, 16);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPARENTHESIS", 24);
			LeaveRule("LPARENTHESIS", 24);
			LeaveRule_LPARENTHESIS();
		}
	}
	// $ANTLR end "LPARENTHESIS"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 25);
		TraceIn("MINUS", 25);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:41:7: ( '-' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:41:9: '-'
			{
			DebugLocation(41, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 25);
			LeaveRule("MINUS", 25);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MULT();
	partial void LeaveRule_MULT();

	// $ANTLR start "MULT"
	[GrammarRule("MULT")]
	private void mMULT()
	{
		EnterRule_MULT();
		EnterRule("MULT", 26);
		TraceIn("MULT", 26);
		try
		{
			int _type = MULT;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:42:6: ( '*' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:42:8: '*'
			{
			DebugLocation(42, 8);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULT", 26);
			LeaveRule("MULT", 26);
			LeaveRule_MULT();
		}
	}
	// $ANTLR end "MULT"

	partial void EnterRule_NIL();
	partial void LeaveRule_NIL();

	// $ANTLR start "NIL"
	[GrammarRule("NIL")]
	private void mNIL()
	{
		EnterRule_NIL();
		EnterRule("NIL", 27);
		TraceIn("NIL", 27);
		try
		{
			int _type = NIL;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:43:5: ( 'nil' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:43:7: 'nil'
			{
			DebugLocation(43, 7);
			Match("nil"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NIL", 27);
			LeaveRule("NIL", 27);
			LeaveRule_NIL();
		}
	}
	// $ANTLR end "NIL"

	partial void EnterRule_NOT_EQUAL();
	partial void LeaveRule_NOT_EQUAL();

	// $ANTLR start "NOT_EQUAL"
	[GrammarRule("NOT_EQUAL")]
	private void mNOT_EQUAL()
	{
		EnterRule_NOT_EQUAL();
		EnterRule("NOT_EQUAL", 28);
		TraceIn("NOT_EQUAL", 28);
		try
		{
			int _type = NOT_EQUAL;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:44:11: ( '<>' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:44:13: '<>'
			{
			DebugLocation(44, 13);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT_EQUAL", 28);
			LeaveRule("NOT_EQUAL", 28);
			LeaveRule_NOT_EQUAL();
		}
	}
	// $ANTLR end "NOT_EQUAL"

	partial void EnterRule_OF();
	partial void LeaveRule_OF();

	// $ANTLR start "OF"
	[GrammarRule("OF")]
	private void mOF()
	{
		EnterRule_OF();
		EnterRule("OF", 29);
		TraceIn("OF", 29);
		try
		{
			int _type = OF;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:45:4: ( 'of' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:45:6: 'of'
			{
			DebugLocation(45, 6);
			Match("of"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OF", 29);
			LeaveRule("OF", 29);
			LeaveRule_OF();
		}
	}
	// $ANTLR end "OF"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 30);
		TraceIn("OR", 30);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:46:4: ( '|' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:46:6: '|'
			{
			DebugLocation(46, 6);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 30);
			LeaveRule("OR", 30);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 31);
		TraceIn("PLUS", 31);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:47:6: ( '+' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:47:8: '+'
			{
			DebugLocation(47, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 31);
			LeaveRule("PLUS", 31);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_RBRACE();
	partial void LeaveRule_RBRACE();

	// $ANTLR start "RBRACE"
	[GrammarRule("RBRACE")]
	private void mRBRACE()
	{
		EnterRule_RBRACE();
		EnterRule("RBRACE", 32);
		TraceIn("RBRACE", 32);
		try
		{
			int _type = RBRACE;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:48:8: ( '}' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:48:10: '}'
			{
			DebugLocation(48, 10);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RBRACE", 32);
			LeaveRule("RBRACE", 32);
			LeaveRule_RBRACE();
		}
	}
	// $ANTLR end "RBRACE"

	partial void EnterRule_RBRACKET();
	partial void LeaveRule_RBRACKET();

	// $ANTLR start "RBRACKET"
	[GrammarRule("RBRACKET")]
	private void mRBRACKET()
	{
		EnterRule_RBRACKET();
		EnterRule("RBRACKET", 33);
		TraceIn("RBRACKET", 33);
		try
		{
			int _type = RBRACKET;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:49:10: ( ']' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:49:12: ']'
			{
			DebugLocation(49, 12);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RBRACKET", 33);
			LeaveRule("RBRACKET", 33);
			LeaveRule_RBRACKET();
		}
	}
	// $ANTLR end "RBRACKET"

	partial void EnterRule_RPARENTHESIS();
	partial void LeaveRule_RPARENTHESIS();

	// $ANTLR start "RPARENTHESIS"
	[GrammarRule("RPARENTHESIS")]
	private void mRPARENTHESIS()
	{
		EnterRule_RPARENTHESIS();
		EnterRule("RPARENTHESIS", 34);
		TraceIn("RPARENTHESIS", 34);
		try
		{
			int _type = RPARENTHESIS;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:50:14: ( ')' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:50:16: ')'
			{
			DebugLocation(50, 16);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPARENTHESIS", 34);
			LeaveRule("RPARENTHESIS", 34);
			LeaveRule_RPARENTHESIS();
		}
	}
	// $ANTLR end "RPARENTHESIS"

	partial void EnterRule_SEMICOLON();
	partial void LeaveRule_SEMICOLON();

	// $ANTLR start "SEMICOLON"
	[GrammarRule("SEMICOLON")]
	private void mSEMICOLON()
	{
		EnterRule_SEMICOLON();
		EnterRule("SEMICOLON", 35);
		TraceIn("SEMICOLON", 35);
		try
		{
			int _type = SEMICOLON;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:51:11: ( ';' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:51:13: ';'
			{
			DebugLocation(51, 13);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMICOLON", 35);
			LeaveRule("SEMICOLON", 35);
			LeaveRule_SEMICOLON();
		}
	}
	// $ANTLR end "SEMICOLON"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 36);
		TraceIn("THEN", 36);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:52:6: ( 'then' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:52:8: 'then'
			{
			DebugLocation(52, 8);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 36);
			LeaveRule("THEN", 36);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_TO();
	partial void LeaveRule_TO();

	// $ANTLR start "TO"
	[GrammarRule("TO")]
	private void mTO()
	{
		EnterRule_TO();
		EnterRule("TO", 37);
		TraceIn("TO", 37);
		try
		{
			int _type = TO;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:53:4: ( 'to' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:53:6: 'to'
			{
			DebugLocation(53, 6);
			Match("to"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TO", 37);
			LeaveRule("TO", 37);
			LeaveRule_TO();
		}
	}
	// $ANTLR end "TO"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 38);
		TraceIn("TYPE", 38);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:54:6: ( 'type' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:54:8: 'type'
			{
			DebugLocation(54, 8);
			Match("type"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 38);
			LeaveRule("TYPE", 38);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_VAR();
	partial void LeaveRule_VAR();

	// $ANTLR start "VAR"
	[GrammarRule("VAR")]
	private void mVAR()
	{
		EnterRule_VAR();
		EnterRule("VAR", 39);
		TraceIn("VAR", 39);
		try
		{
			int _type = VAR;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:55:5: ( 'var' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:55:7: 'var'
			{
			DebugLocation(55, 7);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VAR", 39);
			LeaveRule("VAR", 39);
			LeaveRule_VAR();
		}
	}
	// $ANTLR end "VAR"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 40);
		TraceIn("WHILE", 40);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:56:7: ( 'while' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:56:9: 'while'
			{
			DebugLocation(56, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 40);
			LeaveRule("WHILE", 40);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 41);
		TraceIn("DIGIT", 41);
		try
		{
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:106:7: ( '0' .. '9' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:
			{
			DebugLocation(106, 7);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 41);
			LeaveRule("DIGIT", 41);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 42);
		TraceIn("LETTER", 42);
		try
		{
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:109:8: ( 'a' .. 'z' | 'A' .. 'Z' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:
			{
			DebugLocation(109, 8);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 42);
			LeaveRule("LETTER", 42);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 43);
		TraceIn("WS", 43);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:110:4: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:110:6: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(110, 6);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(110, 33);
			 _channel=Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 43);
			LeaveRule("WS", 43);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_IDENTIFIER();
	partial void LeaveRule_IDENTIFIER();

	// $ANTLR start "IDENTIFIER"
	[GrammarRule("IDENTIFIER")]
	private void mIDENTIFIER()
	{
		EnterRule_IDENTIFIER();
		EnterRule("IDENTIFIER", 44);
		TraceIn("IDENTIFIER", 44);
		try
		{
			int _type = IDENTIFIER;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:112:12: ( LETTER ( LETTER | DIGIT | '_' )* )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:112:14: LETTER ( LETTER | DIGIT | '_' )*
			{
			DebugLocation(112, 14);
			mLETTER(); 
			DebugLocation(112, 21);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:112:21: ( LETTER | DIGIT | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:
					{
					DebugLocation(112, 21);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTIFIER", 44);
			LeaveRule("IDENTIFIER", 44);
			LeaveRule_IDENTIFIER();
		}
	}
	// $ANTLR end "IDENTIFIER"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 45);
		TraceIn("INT", 45);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:114:5: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:114:7: ( DIGIT )+
			{
			DebugLocation(114, 7);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:114:7: ( DIGIT )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:
					{
					DebugLocation(114, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 45);
			LeaveRule("INT", 45);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 46);
		TraceIn("ESC_SEQ", 46);
		try
		{
			int _type = ESC_SEQ;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:117:2: ( '\\\\' ( 't' | 'n' | 'r' | '\\\"' | '\\\\' | DIGIT DIGIT DIGIT | ( WS )+ '\\\\' ) )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:117:4: '\\\\' ( 't' | 'n' | 'r' | '\\\"' | '\\\\' | DIGIT DIGIT DIGIT | ( WS )+ '\\\\' )
			{
			DebugLocation(117, 4);
			Match('\\'); 
			DebugLocation(117, 9);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:117:9: ( 't' | 'n' | 'r' | '\\\"' | '\\\\' | DIGIT DIGIT DIGIT | ( WS )+ '\\\\' )
			int alt4=7;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case 't':
				{
				alt4 = 1;
				}
				break;
			case 'n':
				{
				alt4 = 2;
				}
				break;
			case 'r':
				{
				alt4 = 3;
				}
				break;
			case '\"':
				{
				alt4 = 4;
				}
				break;
			case '\\':
				{
				alt4 = 5;
				}
				break;
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				{
				alt4 = 6;
				}
				break;
			case '\t':
			case '\n':
			case '\r':
			case ' ':
				{
				alt4 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:117:11: 't'
				{
				DebugLocation(117, 11);
				Match('t'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:117:17: 'n'
				{
				DebugLocation(117, 17);
				Match('n'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:117:23: 'r'
				{
				DebugLocation(117, 23);
				Match('r'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:117:29: '\\\"'
				{
				DebugLocation(117, 29);
				Match('\"'); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:117:36: '\\\\'
				{
				DebugLocation(117, 36);
				Match('\\'); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:117:43: DIGIT DIGIT DIGIT
				{
				DebugLocation(117, 43);
				mDIGIT(); 
				DebugLocation(117, 49);
				mDIGIT(); 
				DebugLocation(117, 55);
				mDIGIT(); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:117:63: ( WS )+ '\\\\'
				{
				DebugLocation(117, 63);
				// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:117:63: ( WS )+
				int cnt3=0;
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>='\t' && LA3_0<='\n')||LA3_0=='\r'||LA3_0==' '))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:117:63: WS
						{
						DebugLocation(117, 63);
						mWS(); 

						}
						break;

					default:
						if (cnt3 >= 1)
							goto loop3;

						EarlyExitException eee3 = new EarlyExitException( 3, input );
						DebugRecognitionException(eee3);
						throw eee3;
					}
					cnt3++;
				}
				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(117, 67);
				Match('\\'); 

				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ESC_SEQ", 46);
			LeaveRule("ESC_SEQ", 46);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 47);
		TraceIn("COMMENT", 47);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:119:9: ( '/*' ( options {greedy=false; } : COMMENT | . )* '*/' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:119:11: '/*' ( options {greedy=false; } : COMMENT | . )* '*/'
			{
			DebugLocation(119, 11);
			Match("/*"); 

			DebugLocation(119, 16);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:119:16: ( options {greedy=false; } : COMMENT | . )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=3;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0=='*'))
				{
					int LA5_1 = input.LA(2);

					if ((LA5_1=='/'))
					{
						alt5 = 3;
					}
					else if (((LA5_1>='\u0000' && LA5_1<='.')||(LA5_1>='0' && LA5_1<='\uFFFF')))
					{
						alt5 = 2;
					}


				}
				else if ((LA5_0=='/'))
				{
					int LA5_2 = input.LA(2);

					if ((LA5_2=='*'))
					{
						alt5 = 1;
					}
					else if (((LA5_2>='\u0000' && LA5_2<=')')||(LA5_2>='+' && LA5_2<='\uFFFF')))
					{
						alt5 = 2;
					}


				}
				else if (((LA5_0>='\u0000' && LA5_0<=')')||(LA5_0>='+' && LA5_0<='.')||(LA5_0>='0' && LA5_0<='\uFFFF')))
				{
					alt5 = 2;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:119:43: COMMENT
					{
					DebugLocation(119, 43);
					mCOMMENT(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:119:53: .
					{
					DebugLocation(119, 53);
					MatchAny(); 

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(119, 57);
			Match("*/"); 

			DebugLocation(119, 62);
			 _channel = Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 47);
			LeaveRule("COMMENT", 47);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 48);
		TraceIn("STRING", 48);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:121:8: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:121:10: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(121, 10);
			Match('\"'); 
			DebugLocation(121, 14);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:121:14: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=3;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0=='\\'))
				{
					alt6 = 1;
				}
				else if (((LA6_0>='\u0000' && LA6_0<='!')||(LA6_0>='#' && LA6_0<='[')||(LA6_0>=']' && LA6_0<='\uFFFF')))
				{
					alt6 = 2;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:121:15: ESC_SEQ
					{
					DebugLocation(121, 15);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:121:25: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(121, 25);
					input.Consume();


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(121, 39);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 48);
			LeaveRule("STRING", 48);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	public override void mTokens()
	{
		// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:8: ( AND | ARRAY | ASSIGN | BREAK | COLON | COMMA | DIV | DO | DOT | ELSE | END | EQUAL | FOR | FUNCTION | GREATER_EQUAL_THAN | GREATER_THAN | IF | IN | LBRACE | LBRACKET | LESS_EQUAL_THAN | LESS_THAN | LET | LPARENTHESIS | MINUS | MULT | NIL | NOT_EQUAL | OF | OR | PLUS | RBRACE | RBRACKET | RPARENTHESIS | SEMICOLON | THEN | TO | TYPE | VAR | WHILE | WS | IDENTIFIER | INT | ESC_SEQ | COMMENT | STRING )
		int alt7=46;
		try { DebugEnterDecision(7, false);
		try
		{
			alt7 = dfa7.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(7); }
		switch (alt7)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:10: AND
			{
			DebugLocation(1, 10);
			mAND(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:14: ARRAY
			{
			DebugLocation(1, 14);
			mARRAY(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:20: ASSIGN
			{
			DebugLocation(1, 20);
			mASSIGN(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:27: BREAK
			{
			DebugLocation(1, 27);
			mBREAK(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:33: COLON
			{
			DebugLocation(1, 33);
			mCOLON(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:39: COMMA
			{
			DebugLocation(1, 39);
			mCOMMA(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:45: DIV
			{
			DebugLocation(1, 45);
			mDIV(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:49: DO
			{
			DebugLocation(1, 49);
			mDO(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:52: DOT
			{
			DebugLocation(1, 52);
			mDOT(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:56: ELSE
			{
			DebugLocation(1, 56);
			mELSE(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:61: END
			{
			DebugLocation(1, 61);
			mEND(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:65: EQUAL
			{
			DebugLocation(1, 65);
			mEQUAL(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:71: FOR
			{
			DebugLocation(1, 71);
			mFOR(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:75: FUNCTION
			{
			DebugLocation(1, 75);
			mFUNCTION(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:84: GREATER_EQUAL_THAN
			{
			DebugLocation(1, 84);
			mGREATER_EQUAL_THAN(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:103: GREATER_THAN
			{
			DebugLocation(1, 103);
			mGREATER_THAN(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:116: IF
			{
			DebugLocation(1, 116);
			mIF(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:119: IN
			{
			DebugLocation(1, 119);
			mIN(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:122: LBRACE
			{
			DebugLocation(1, 122);
			mLBRACE(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:129: LBRACKET
			{
			DebugLocation(1, 129);
			mLBRACKET(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:138: LESS_EQUAL_THAN
			{
			DebugLocation(1, 138);
			mLESS_EQUAL_THAN(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:154: LESS_THAN
			{
			DebugLocation(1, 154);
			mLESS_THAN(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:164: LET
			{
			DebugLocation(1, 164);
			mLET(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:168: LPARENTHESIS
			{
			DebugLocation(1, 168);
			mLPARENTHESIS(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:181: MINUS
			{
			DebugLocation(1, 181);
			mMINUS(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:187: MULT
			{
			DebugLocation(1, 187);
			mMULT(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:192: NIL
			{
			DebugLocation(1, 192);
			mNIL(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:196: NOT_EQUAL
			{
			DebugLocation(1, 196);
			mNOT_EQUAL(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:206: OF
			{
			DebugLocation(1, 206);
			mOF(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:209: OR
			{
			DebugLocation(1, 209);
			mOR(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:212: PLUS
			{
			DebugLocation(1, 212);
			mPLUS(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:217: RBRACE
			{
			DebugLocation(1, 217);
			mRBRACE(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:224: RBRACKET
			{
			DebugLocation(1, 224);
			mRBRACKET(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:233: RPARENTHESIS
			{
			DebugLocation(1, 233);
			mRPARENTHESIS(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:246: SEMICOLON
			{
			DebugLocation(1, 246);
			mSEMICOLON(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:256: THEN
			{
			DebugLocation(1, 256);
			mTHEN(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:261: TO
			{
			DebugLocation(1, 261);
			mTO(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:264: TYPE
			{
			DebugLocation(1, 264);
			mTYPE(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:269: VAR
			{
			DebugLocation(1, 269);
			mVAR(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:273: WHILE
			{
			DebugLocation(1, 273);
			mWHILE(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:279: WS
			{
			DebugLocation(1, 279);
			mWS(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:282: IDENTIFIER
			{
			DebugLocation(1, 282);
			mIDENTIFIER(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:293: INT
			{
			DebugLocation(1, 293);
			mINT(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:297: ESC_SEQ
			{
			DebugLocation(1, 297);
			mESC_SEQ(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:305: COMMENT
			{
			DebugLocation(1, 305);
			mCOMMENT(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// D:\\Programing\\Projects\\TigerCompiler\\TigerGrammar\\Tiger.g:1:313: STRING
			{
			DebugLocation(1, 313);
			mSTRING(); 

			}
			break;

		}

	}


	#region DFA
	DFA7 dfa7;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa7 = new DFA7(this);
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x2\xFFFF\x1\x21\x1\x27\x1\x21\x1\xFFFF\x1\x2A\x1\x21\x1\xFFFF\x1\x21"+
			"\x1\xFFFF\x1\x21\x1\x31\x1\x21\x2\xFFFF\x1\x36\x1\x21\x3\xFFFF\x2\x21"+
			"\x6\xFFFF\x3\x21\x5\xFFFF\x1\x21\x2\xFFFF\x1\x21\x2\xFFFF\x1\x41\x4\x21"+
			"\x2\xFFFF\x1\x46\x1\x47\x3\xFFFF\x2\x21\x1\x4A\x1\x21\x1\x4C\x5\x21\x1"+
			"\xFFFF\x1\x21\x1\x53\x1\x54\x1\x21\x2\xFFFF\x1\x56\x1\x57\x1\xFFFF\x1"+
			"\x21\x1\xFFFF\x1\x21\x1\x5A\x3\x21\x1\x5E\x2\xFFFF\x1\x21\x2\xFFFF\x1"+
			"\x60\x1\x61\x1\xFFFF\x1\x21\x1\x63\x1\x64\x1\xFFFF\x1\x21\x2\xFFFF\x1"+
			"\x66\x2\xFFFF\x1\x21\x1\xFFFF\x1\x21\x1\x69\x1\xFFFF";
		private const string DFA7_eofS =
			"\x6A\xFFFF";
		private const string DFA7_minS =
			"\x1\x9\x1\xFFFF\x1\x72\x1\x3D\x1\x72\x1\xFFFF\x1\x2A\x1\x6F\x1\xFFFF"+
			"\x1\x6C\x1\xFFFF\x1\x6F\x1\x3D\x1\x66\x2\xFFFF\x1\x3D\x1\x65\x3\xFFFF"+
			"\x1\x69\x1\x66\x6\xFFFF\x1\x68\x1\x61\x1\x68\x5\xFFFF\x1\x72\x2\xFFFF"+
			"\x1\x65\x2\xFFFF\x1\x30\x1\x73\x1\x64\x1\x72\x1\x6E\x2\xFFFF\x2\x30\x3"+
			"\xFFFF\x1\x74\x1\x6C\x1\x30\x1\x65\x1\x30\x1\x70\x1\x72\x1\x69\x2\x61"+
			"\x1\xFFFF\x1\x65\x2\x30\x1\x63\x2\xFFFF\x2\x30\x1\xFFFF\x1\x6E\x1\xFFFF"+
			"\x1\x65\x1\x30\x1\x6C\x1\x79\x1\x6B\x1\x30\x2\xFFFF\x1\x74\x2\xFFFF\x2"+
			"\x30\x1\xFFFF\x1\x65\x2\x30\x1\xFFFF\x1\x69\x2\xFFFF\x1\x30\x2\xFFFF"+
			"\x1\x6F\x1\xFFFF\x1\x6E\x1\x30\x1\xFFFF";
		private const string DFA7_maxS =
			"\x1\x7D\x1\xFFFF\x1\x72\x1\x3D\x1\x72\x1\xFFFF\x1\x2A\x1\x6F\x1\xFFFF"+
			"\x1\x6E\x1\xFFFF\x1\x75\x1\x3D\x1\x6E\x2\xFFFF\x1\x3E\x1\x65\x3\xFFFF"+
			"\x1\x69\x1\x66\x6\xFFFF\x1\x79\x1\x61\x1\x68\x5\xFFFF\x1\x72\x2\xFFFF"+
			"\x1\x65\x2\xFFFF\x1\x7A\x1\x73\x1\x64\x1\x72\x1\x6E\x2\xFFFF\x2\x7A\x3"+
			"\xFFFF\x1\x74\x1\x6C\x1\x7A\x1\x65\x1\x7A\x1\x70\x1\x72\x1\x69\x2\x61"+
			"\x1\xFFFF\x1\x65\x2\x7A\x1\x63\x2\xFFFF\x2\x7A\x1\xFFFF\x1\x6E\x1\xFFFF"+
			"\x1\x65\x1\x7A\x1\x6C\x1\x79\x1\x6B\x1\x7A\x2\xFFFF\x1\x74\x2\xFFFF\x2"+
			"\x7A\x1\xFFFF\x1\x65\x2\x7A\x1\xFFFF\x1\x69\x2\xFFFF\x1\x7A\x2\xFFFF"+
			"\x1\x6F\x1\xFFFF\x1\x6E\x1\x7A\x1\xFFFF";
		private const string DFA7_acceptS =
			"\x1\xFFFF\x1\x1\x3\xFFFF\x1\x6\x2\xFFFF\x1\x9\x1\xFFFF\x1\xC\x3\xFFFF"+
			"\x1\x13\x1\x14\x2\xFFFF\x1\x18\x1\x19\x1\x1A\x2\xFFFF\x1\x1E\x1\x1F\x1"+
			"\x20\x1\x21\x1\x22\x1\x23\x3\xFFFF\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2E"+
			"\x1\xFFFF\x1\x3\x1\x5\x1\xFFFF\x1\x2D\x1\x7\x5\xFFFF\x1\xF\x1\x10\x2"+
			"\xFFFF\x1\x15\x1\x1C\x1\x16\xA\xFFFF\x1\x8\x4\xFFFF\x1\x11\x1\x12\x2"+
			"\xFFFF\x1\x1D\x1\xFFFF\x1\x25\x6\xFFFF\x1\xB\x1\xD\x1\xFFFF\x1\x17\x1"+
			"\x1B\x2\xFFFF\x1\x27\x3\xFFFF\x1\xA\x1\xFFFF\x1\x24\x1\x26\x1\xFFFF\x1"+
			"\x2\x1\x4\x1\xFFFF\x1\x28\x2\xFFFF\x1\xE";
		private const string DFA7_specialS =
			"\x6A\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x2\x20\x2\xFFFF\x1\x20\x12\xFFFF\x1\x20\x1\xFFFF\x1\x24\x3\xFFFF\x1"+
				"\x1\x1\xFFFF\x1\x12\x1\x1B\x1\x14\x1\x18\x1\x5\x1\x13\x1\x8\x1\x6\xA"+
				"\x22\x1\x3\x1\x1C\x1\x10\x1\xA\x1\xC\x2\xFFFF\x1A\x21\x1\xF\x1\x23\x1"+
				"\x1A\x3\xFFFF\x1\x2\x1\x4\x1\x21\x1\x7\x1\x9\x1\xB\x2\x21\x1\xD\x2\x21"+
				"\x1\x11\x1\x21\x1\x15\x1\x16\x4\x21\x1\x1D\x1\x21\x1\x1E\x1\x1F\x3\x21"+
				"\x1\xE\x1\x17\x1\x19",
				"",
				"\x1\x25",
				"\x1\x26",
				"\x1\x28",
				"",
				"\x1\x29",
				"\x1\x2B",
				"",
				"\x1\x2C\x1\xFFFF\x1\x2D",
				"",
				"\x1\x2E\x5\xFFFF\x1\x2F",
				"\x1\x30",
				"\x1\x32\x7\xFFFF\x1\x33",
				"",
				"",
				"\x1\x34\x1\x35",
				"\x1\x37",
				"",
				"",
				"",
				"\x1\x38",
				"\x1\x39",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3A\x6\xFFFF\x1\x3B\x9\xFFFF\x1\x3C",
				"\x1\x3D",
				"\x1\x3E",
				"",
				"",
				"",
				"",
				"",
				"\x1\x3F",
				"",
				"",
				"\x1\x40",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44",
				"\x1\x45",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"",
				"",
				"\x1\x48",
				"\x1\x49",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x4B",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x4D",
				"\x1\x4E",
				"\x1\x4F",
				"\x1\x50",
				"\x1\x51",
				"",
				"\x1\x52",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x55",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"\x1\x58",
				"",
				"\x1\x59",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\x1\x5B",
				"\x1\x5C",
				"\x1\x5D",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"",
				"\x1\x5F",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"\x1\x62",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"\x1\x65",
				"",
				"",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				"",
				"",
				"\x1\x67",
				"",
				"\x1\x68",
				"\xA\x21\x7\xFFFF\x1A\x21\x4\xFFFF\x1\x21\x1\xFFFF\x1A\x21",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( AND | ARRAY | ASSIGN | BREAK | COLON | COMMA | DIV | DO | DOT | ELSE | END | EQUAL | FOR | FUNCTION | GREATER_EQUAL_THAN | GREATER_THAN | IF | IN | LBRACE | LBRACKET | LESS_EQUAL_THAN | LESS_THAN | LET | LPARENTHESIS | MINUS | MULT | NIL | NOT_EQUAL | OF | OR | PLUS | RBRACE | RBRACKET | RPARENTHESIS | SEMICOLON | THEN | TO | TYPE | VAR | WHILE | WS | IDENTIFIER | INT | ESC_SEQ | COMMENT | STRING );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
